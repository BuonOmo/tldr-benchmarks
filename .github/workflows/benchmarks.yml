name: Benchmarks

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: "${{ github.workflow }}@${{ github.ref }}"
  cancel-in-progress: true

jobs:
  mac_bench:
    runs-on: macos-latest
    env:
      HOMEBREW_NO_AUTOREMOVE: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      # skip_slow: 1
    steps:
      - name: Install dependencies
        run: brew update --quiet && brew install --quiet hyperfine
      - name: Install `tealdeer` (https://github.com/tealdeer-rs/tealdeer)
        run: |
          brew install --skip-link --no-binaries --force --quiet tealdeer
          ln -s $(brew --prefix)/Cellar/tealdeer/*/bin/tldr ./tealdeer
          echo "TEALDEER_CACHE_DIR,tealdeer" >> command_list.csv
      - name: Install `tlrc` (https://github.com/tldr-pages/tlrc)
        run: |
          brew install --skip-link --no-binaries --force --quiet tlrc
          ln -s $(brew --prefix)/Cellar/tlrc/*/bin/tldr ./tlrc
          echo "TLDR_CACHE_DIR,tlrc" >> command_list.csv
      - name: Install `tldr-bash` (https://github.com/ewels/tldr-bash)
        run: |
          curl --silent --output ./tldr-bash https://raw.githubusercontent.com/raylee/tldr/master/tldr
          chmod +x ./tldr-bash
          echo "XDG_DATA_HOME,tldr-bash" >> command_list.csv
      - name: Install `tldr-c-client` (https://github.com/tldr-pages/tldr-c-client)
        run: |
          brew install --skip-link --no-binaries --force --quiet tldr
          ln -s $(brew --prefix)/Cellar/tldr/*/bin/tldr ./tldr-c-client
          echo "TLDR_CACHE_DIR,tldr-c-client" >> command_list.csv
      - name: Install `tldr-node-client` (https://github.com/tldr-pages/tldr-node-client)
        if: ${{ env.skip_slow != 1 }}
        run: |
          npm install -g tldr
          ln -s $(realpath $(which tldr)) ./tldr-node-client
          rm -f $(which tldr)
          echo "HOME,tldr-node-client" >> command_list.csv
      - name: Install `tldr-python-client` (https://github.com/tldr-pages/tldr-python-client)
        run: |
          pip install tldr
          mv $(which tldr) ./tldr-python-client
          echo "HOME,tldr-python-client" >> command_list.csv
      - name: Install `fast-tldr` (https://github.com/gutjuri/fast-tldr)
        if: ${{ env.skip_slow != 1 }}
        run: |
          curl -sSL https://get.haskellstack.org/ | sh
          git clone --quiet --depth 1 https://github.com/gutjuri/fast-tldr.git fast-tldr-repo
          cd fast-tldr-repo
          stack install --local-bin-path . > /dev/null
          mv tldr ../fast-tldr
          cd ..
          echo "XDG_DATA_HOME,fast-tldr" >> command_list.csv
      - name: Install `outfieldr` (https://gitlab.com/ve-nt/outfieldr)
        if: false # outfieldr depends on zig 0.9.1 which is broken on Mac M* chips.
        run: |
          git clone --quiet --depth 1 https://gitlab.com/ve-nt/outfieldr outfieldr-repo
          cd outfieldr-repo
          git submodule update --init
          wget --quiet https://ziglang.org/download/0.9.1/zig-macos-aarch64-0.9.1.tar.xz
          tar -xf zig-macos-aarch64-0.9.1.tar.xz
          ./zig-macos-aarch64-0.9.1/zig build -Drelease-safe
          cd ..
          cp outfieldr-repo/bin/tldr ./outfieldr
          echo "HOME,outfieldr" >> command_list.csv
      - name: Update caches and run benchmark
        if: ${{ !cancelled() }}
        run: |
          echo "Commands to benchmark:"
          cat command_list.csv
          echo
          benchmarks_tar=()
          benchmarks_update=()
          while IFS=, read env cmd; do
            mkdir -p ./caches/$cmd
            sync && sudo purge
            timing_s=$({ time bash -c "$env=./caches/$cmd ./$cmd --update"; } 2>&1 | awk '/real/ {print $2}')
            echo "Updating cache for $cmd in $timing_s."
            echo "$cmd,$timing_s" >> update_times.csv
            benchmarks_tar+=("$env=./caches/$cmd ./$cmd tar")
            benchmarks_update+=("$env=./caches/$cmd ./$cmd --update")
          done < command_list.csv
          hyperfine \
            --warmup 10 \
            --prepare 'sync && sudo purge' \
            --export-json hyperfine_tar.json \
            "${benchmarks_tar[@]}"
          hyperfine \
            --warmup 10 \
            --prepare 'sync && sudo purge' \
            --export-json hyperfine_update.json \
            "${benchmarks_update[@]}"
          mkdir export
          mv hyperfine_tar.json export/
          mv hyperfine_update.json export/
          mv update_times.csv export/
      - name: Upload test information
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: mac_bench_results
          path: export/*
  ubuntu_bench:
    runs-on: ubuntu-latest
    env:
      skip_slow: 1
    steps:
      - name: Install dependencies
        run: sudo apt-get -qq update && sudo apt-get install -yqq hyperfine
      - name: Install `tldr-hs` (https://github.com/psibi/tldr-hs)
        if: false # TODO
        run: |
          sudo apt-get install -yqq tldr-hs
          sudo mv $(which tldr) ./tldr-hs
          echo "XDG_DATA_HOME,tldr-hs" >> command_list.csv
      - name: Install `tealdeer` (https://github.com/tealdeer-rs/tealdeer)
        run: |
          sudo apt-get install -yqq tealdeer
          sudo mv $(which tldr) ./tealdeer
          echo "TEALDEER_CACHE_DIR,tealdeer" >> command_list.csv
      - name: Install `tldr-bash` (https://github.com/ewels/tldr-bash)
        run: |
          curl --silent -o ./tldr-bash https://raw.githubusercontent.com/raylee/tldr/master/tldr
          chmod +x ./tldr-bash
          echo "XDG_DATA_HOME,tldr-bash" >> command_list.csv
      - name: Install `tldr-c-client` (https://github.com/tldr-pages/tldr-c-client)
        run: |
          echo TODO
      - name: Install `tldr-node-client` (https://github.com/tldr-pages/tldr-node-client)
        if: ${{ env.skip_slow != 1 }}
        run: |
          npm install -g tldr
          ln -s $(realpath $(which tldr)) ./tldr-node-client
          sudo rm -f $(which tldr)
          echo "HOME,tldr-node-client" >> command_list.csv
      - name: Install `tldr-python-client` (https://github.com/tldr-pages/tldr-python-client)
        run: |
          echo TODO
          # pip install tldr
          # sudo mv $(which tldr) ./tldr-python-client
          # echo "HOME,tldr-python-client" >> command_list.csv
      - name: Update caches and run benchmark
        if: ${{ !cancelled() }}
        run: |
          echo "Commands to benchmark:"
          cat command_list.csv
          echo
          benchmarks_tar=()
          benchmarks_update=()
          while IFS=, read env cmd; do
            mkdir -p ./caches/$cmd
            sync; echo 3 | sudo tee /proc/sys/vm/drop_caches
            timing_s=$({ time bash -c "$env=./caches/$cmd ./$cmd --update"; } 2>&1 | awk '/real/ {print $2}')
            echo "Updating cache for $cmd in $timing_s."
            echo "$cmd,$timing_s" >> update_times.csv
            benchmarks_tar+=("$env=./caches/$cmd ./$cmd tar")
            benchmarks_update+=("$env=./caches/$cmd ./$cmd --update")
          done < command_list.csv
          hyperfine \
            --warmup 10 \
            --prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches' \
            --export-json hyperfine_tar.json \
            "${benchmarks_tar[@]}"
          hyperfine \
            --warmup 10 \
            --prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches' \
            --export-json hyperfine_update.json \
            "${benchmarks_update[@]}"
          mkdir export
          mv hyperfine_tar.json export/
          mv hyperfine_update.json export/
          mv update_times.csv export/
      - name: Upload test information
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ubuntu_bench_results
          path: export/*
  generate_readme:
    runs-on: ubuntu-latest
    needs: [mac_bench, ubuntu_bench]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download test information
        uses: actions/download-artifact@v4
        with:
          name: mac_bench_results
          path: mac
      - name: Download test information
        uses: actions/download-artifact@v4
        with:
          name: ubuntu_bench_results
          path: ubuntu
      - name: Generate README
        run: |
          ruby generate_readme.rb \
            mac/hyperfine_tar.json    mac/hyperfine_update.json    mac/update_times.csv \
            ubuntu/hyperfine_tar.json ubuntu/hyperfine_update.json ubuntu/update_times.csv
      - uses: EndBug/add-and-commit@v9 # You can change this to use a specific version.
        with:
          add: README.md
          author_name: Ulysse Buonomo
          author_email: buonomo.ulysse@gmail.com
          committer_name: GitHub Actions
          committer_email: actions@github.com
          message: "auto: update benchmarks"
